import {
  require_react
} from "./chunk-WXHCIBIY.js";
import {
  __commonJS
} from "./chunk-UV5CTPV7.js";

// node_modules/react-typist/dist/Typist.js
var require_Typist = __commonJS({
  "node_modules/react-typist/dist/Typist.js"(exports, module) {
    module.exports = /******/
    function(modules) {
      var installedModules = {};
      function __webpack_require__(moduleId) {
        if (installedModules[moduleId])
          return installedModules[moduleId].exports;
        var module2 = installedModules[moduleId] = {
          /******/
          exports: {},
          /******/
          id: moduleId,
          /******/
          loaded: false
          /******/
        };
        modules[moduleId].call(module2.exports, module2, module2.exports, __webpack_require__);
        module2.loaded = true;
        return module2.exports;
      }
      __webpack_require__.m = modules;
      __webpack_require__.c = installedModules;
      __webpack_require__.p = "";
      return __webpack_require__(0);
    }([
      /* 0 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _extends = Object.assign || function(target) {
          for (var i = 1; i < arguments.length; i++) {
            var source = arguments[i];
            for (var key in source) {
              if (Object.prototype.hasOwnProperty.call(source, key)) {
                target[key] = source[key];
              }
            }
          }
          return target;
        };
        var _createClass = /* @__PURE__ */ function() {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _react = __webpack_require__(1);
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = __webpack_require__(2);
        var _propTypes2 = _interopRequireDefault(_propTypes);
        var _Cursor = __webpack_require__(10);
        var _Cursor2 = _interopRequireDefault(_Cursor);
        var _Backspace = __webpack_require__(12);
        var _Backspace2 = _interopRequireDefault(_Backspace);
        var _Delay = __webpack_require__(13);
        var _Delay2 = _interopRequireDefault(_Delay);
        var _utils = __webpack_require__(14);
        var utils = _interopRequireWildcard(_utils);
        function _interopRequireWildcard(obj) {
          if (obj && obj.__esModule) {
            return obj;
          } else {
            var newObj = {};
            if (obj != null) {
              for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key))
                  newObj[key] = obj[key];
              }
            }
            newObj.default = obj;
            return newObj;
          }
        }
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }
        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var ACTION_CHARS = ["🔙", "⏰"];
        var Typist = function(_Component) {
          _inherits(Typist2, _Component);
          function Typist2(props) {
            _classCallCheck(this, Typist2);
            var _this = _possibleConstructorReturn(this, (Typist2.__proto__ || Object.getPrototypeOf(Typist2)).call(this, props));
            _this.state = {
              textLines: [],
              isDone: false
            };
            _this.onTypingDone = function() {
              if (!_this.mounted) {
                return;
              }
              _this.setState({ isDone: true });
              _this.props.onTypingDone();
            };
            _this.delayGenerator = function(line, lineIdx, character, charIdx) {
              var mean = _this.props.avgTypingDelay;
              var std = _this.props.stdTypingDelay;
              return _this.props.delayGenerator(mean, std, {
                line,
                lineIdx,
                character,
                charIdx,
                defDelayGenerator: function defDelayGenerator() {
                  var mn = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : mean;
                  var st = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : std;
                  return utils.gaussianRnd(mn, st);
                }
              });
            };
            _this.typeLine = function(line, lineIdx) {
              if (!_this.mounted) {
                return Promise.resolve();
              }
              var decoratedLine = line;
              var onLineTyped = _this.props.onLineTyped;
              if (utils.isBackspaceElement(line)) {
                if (line.props.delay > 0) {
                  _this.introducedDelay = line.props.delay;
                }
                decoratedLine = String("🔙").repeat(line.props.count);
              } else if (utils.isDelayElement(line)) {
                _this.introducedDelay = line.props.ms;
                decoratedLine = "⏰";
              }
              return new Promise(function(resolve, reject) {
                _this.setState({ textLines: _this.state.textLines.concat([""]) }, function() {
                  utils.eachPromise(decoratedLine, _this.typeCharacter, decoratedLine, lineIdx).then(function() {
                    return onLineTyped(decoratedLine, lineIdx);
                  }).then(resolve).catch(reject);
                });
              });
            };
            _this.typeCharacter = function(character, charIdx, line, lineIdx) {
              if (!_this.mounted) {
                return Promise.resolve();
              }
              var onCharacterTyped = _this.props.onCharacterTyped;
              return new Promise(function(resolve) {
                var textLines = _this.state.textLines.slice();
                utils.sleep(_this.introducedDelay).then(function() {
                  _this.introducedDelay = null;
                  var isBackspace = character === "🔙";
                  var isDelay = character === "⏰";
                  if (isDelay) {
                    resolve();
                    return;
                  }
                  if (isBackspace && lineIdx > 0) {
                    var prevLineIdx = lineIdx - 1;
                    var prevLine = textLines[prevLineIdx];
                    for (var idx = prevLineIdx; idx >= 0; idx--) {
                      if (prevLine.length > 0 && !ACTION_CHARS.includes(prevLine[0])) {
                        break;
                      }
                      prevLineIdx = idx;
                      prevLine = textLines[prevLineIdx];
                    }
                    textLines[prevLineIdx] = prevLine.substr(0, prevLine.length - 1);
                  } else {
                    textLines[lineIdx] += character;
                  }
                  _this.setState({ textLines }, function() {
                    var delay = _this.delayGenerator(line, lineIdx, character, charIdx);
                    onCharacterTyped(character, charIdx);
                    setTimeout(resolve, delay);
                  });
                });
              });
            };
            _this.mounted = false;
            _this.linesToType = [];
            _this.introducedDelay = null;
            if (props.children) {
              _this.linesToType = utils.extractTextFromElement(props.children);
            }
            return _this;
          }
          _createClass(Typist2, [{
            key: "componentDidMount",
            value: function componentDidMount() {
              this.mounted = true;
              var _props = this.props, children = _props.children, startDelay = _props.startDelay;
              if (children) {
                if (startDelay > 0 && typeof window !== "undefined") {
                  setTimeout(this.typeAllLines.bind(this), startDelay);
                } else {
                  this.typeAllLines();
                }
              } else {
                this.onTypingDone();
              }
            }
          }, {
            key: "shouldComponentUpdate",
            value: function shouldComponentUpdate(nextProps, nextState) {
              if (nextState.textLines.length !== this.state.textLines.length) {
                return true;
              }
              for (var idx = 0; idx < nextState.textLines.length; idx++) {
                var line = this.state.textLines[idx];
                var nextLine = nextState.textLines[idx];
                if (line !== nextLine) {
                  return true;
                }
              }
              return this.state.isDone !== nextState.isDone;
            }
          }, {
            key: "componentWillUnmount",
            value: function componentWillUnmount() {
              this.mounted = false;
            }
          }, {
            key: "typeAllLines",
            value: function typeAllLines() {
              var _this2 = this;
              var lines = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.linesToType;
              return utils.eachPromise(lines, this.typeLine).then(function() {
                return _this2.onTypingDone();
              });
            }
          }, {
            key: "render",
            value: function render() {
              var _props2 = this.props, className = _props2.className, cursor = _props2.cursor;
              var isDone = this.state.isDone;
              var innerTree = utils.cloneElementWithSpecifiedText({
                element: this.props.children,
                textLines: this.state.textLines
              });
              return _react2.default.createElement(
                "div",
                { className: "Typist " + className },
                innerTree,
                _react2.default.createElement(_Cursor2.default, _extends({ isDone }, cursor))
              );
            }
          }]);
          return Typist2;
        }(_react.Component);
        Typist.propTypes = {
          children: _propTypes2.default.node,
          className: _propTypes2.default.string,
          avgTypingDelay: _propTypes2.default.number,
          stdTypingDelay: _propTypes2.default.number,
          startDelay: _propTypes2.default.number,
          cursor: _propTypes2.default.object,
          onCharacterTyped: _propTypes2.default.func,
          onLineTyped: _propTypes2.default.func,
          onTypingDone: _propTypes2.default.func,
          delayGenerator: _propTypes2.default.func
        };
        Typist.defaultProps = {
          className: "",
          avgTypingDelay: 70,
          stdTypingDelay: 25,
          startDelay: 0,
          cursor: {},
          onCharacterTyped: function onCharacterTyped() {
          },
          onLineTyped: function onLineTyped() {
          },
          onTypingDone: function onTypingDone() {
          },
          delayGenerator: utils.gaussianRnd
        };
        exports2.default = Typist;
        Typist.Backspace = _Backspace2.default;
        Typist.Delay = _Delay2.default;
      },
      /* 1 */
      /***/
      function(module2, exports2) {
        module2.exports = require_react();
      },
      /* 2 */
      /***/
      function(module2, exports2, __webpack_require__) {
        if (true) {
          var REACT_ELEMENT_TYPE = typeof Symbol === "function" && Symbol.for && Symbol.for("react.element") || 60103;
          var isValidElement = function(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          };
          var throwOnDirectAccess = true;
          module2.exports = __webpack_require__(3)(isValidElement, throwOnDirectAccess);
        } else {
          module2.exports = __webpack_require__(9)();
        }
      },
      /* 3 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        var emptyFunction = __webpack_require__(4);
        var invariant = __webpack_require__(5);
        var warning = __webpack_require__(6);
        var ReactPropTypesSecret = __webpack_require__(7);
        var checkPropTypes = __webpack_require__(8);
        module2.exports = function(isValidElement, throwOnDirectAccess) {
          var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
            if (typeof iteratorFn === "function") {
              return iteratorFn;
            }
          }
          var ANONYMOUS = "<<anonymous>>";
          var ReactPropTypes = {
            array: createPrimitiveTypeChecker("array"),
            bool: createPrimitiveTypeChecker("boolean"),
            func: createPrimitiveTypeChecker("function"),
            number: createPrimitiveTypeChecker("number"),
            object: createPrimitiveTypeChecker("object"),
            string: createPrimitiveTypeChecker("string"),
            symbol: createPrimitiveTypeChecker("symbol"),
            any: createAnyTypeChecker(),
            arrayOf: createArrayOfTypeChecker,
            element: createElementTypeChecker(),
            instanceOf: createInstanceTypeChecker,
            node: createNodeChecker(),
            objectOf: createObjectOfTypeChecker,
            oneOf: createEnumTypeChecker,
            oneOfType: createUnionTypeChecker,
            shape: createShapeTypeChecker
          };
          function is(x, y) {
            if (x === y) {
              return x !== 0 || 1 / x === 1 / y;
            } else {
              return x !== x && y !== y;
            }
          }
          function PropTypeError(message) {
            this.message = message;
            this.stack = "";
          }
          PropTypeError.prototype = Error.prototype;
          function createChainableTypeChecker(validate) {
            if (true) {
              var manualPropTypeCallCache = {};
              var manualPropTypeWarningCount = 0;
            }
            function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
              componentName = componentName || ANONYMOUS;
              propFullName = propFullName || propName;
              if (secret !== ReactPropTypesSecret) {
                if (throwOnDirectAccess) {
                  invariant(
                    false,
                    "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                  );
                } else if (typeof console !== "undefined") {
                  var cacheKey = componentName + ":" + propName;
                  if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                  manualPropTypeWarningCount < 3) {
                    warning(
                      false,
                      "You are manually calling a React.PropTypes validation function for the `%s` prop on `%s`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details.",
                      propFullName,
                      componentName
                    );
                    manualPropTypeCallCache[cacheKey] = true;
                    manualPropTypeWarningCount++;
                  }
                }
              }
              if (props[propName] == null) {
                if (isRequired) {
                  if (props[propName] === null) {
                    return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                  }
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
                }
                return null;
              } else {
                return validate(props, propName, componentName, location, propFullName);
              }
            }
            var chainedCheckType = checkType.bind(null, false);
            chainedCheckType.isRequired = checkType.bind(null, true);
            return chainedCheckType;
          }
          function createPrimitiveTypeChecker(expectedType) {
            function validate(props, propName, componentName, location, propFullName, secret) {
              var propValue = props[propName];
              var propType = getPropType(propValue);
              if (propType !== expectedType) {
                var preciseType = getPreciseType(propValue);
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."));
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function createAnyTypeChecker() {
            return createChainableTypeChecker(emptyFunction.thatReturnsNull);
          }
          function createArrayOfTypeChecker(typeChecker) {
            function validate(props, propName, componentName, location, propFullName) {
              if (typeof typeChecker !== "function") {
                return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
              }
              var propValue = props[propName];
              if (!Array.isArray(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
              }
              for (var i = 0; i < propValue.length; i++) {
                var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function createElementTypeChecker() {
            function validate(props, propName, componentName, location, propFullName) {
              var propValue = props[propName];
              if (!isValidElement(propValue)) {
                var propType = getPropType(propValue);
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function createInstanceTypeChecker(expectedClass) {
            function validate(props, propName, componentName, location, propFullName) {
              if (!(props[propName] instanceof expectedClass)) {
                var expectedClassName = expectedClass.name || ANONYMOUS;
                var actualClassName = getClassName(props[propName]);
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function createEnumTypeChecker(expectedValues) {
            if (!Array.isArray(expectedValues)) {
              true ? warning(false, "Invalid argument supplied to oneOf, expected an instance of array.") : void 0;
              return emptyFunction.thatReturnsNull;
            }
            function validate(props, propName, componentName, location, propFullName) {
              var propValue = props[propName];
              for (var i = 0; i < expectedValues.length; i++) {
                if (is(propValue, expectedValues[i])) {
                  return null;
                }
              }
              var valuesString = JSON.stringify(expectedValues);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + propValue + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
            }
            return createChainableTypeChecker(validate);
          }
          function createObjectOfTypeChecker(typeChecker) {
            function validate(props, propName, componentName, location, propFullName) {
              if (typeof typeChecker !== "function") {
                return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
              }
              var propValue = props[propName];
              var propType = getPropType(propValue);
              if (propType !== "object") {
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
              }
              for (var key in propValue) {
                if (propValue.hasOwnProperty(key)) {
                  var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                  if (error instanceof Error) {
                    return error;
                  }
                }
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function createUnionTypeChecker(arrayOfTypeCheckers) {
            if (!Array.isArray(arrayOfTypeCheckers)) {
              true ? warning(false, "Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
              return emptyFunction.thatReturnsNull;
            }
            for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
              var checker = arrayOfTypeCheckers[i];
              if (typeof checker !== "function") {
                warning(
                  false,
                  "Invalid argument supplid to oneOfType. Expected an array of check functions, but received %s at index %s.",
                  getPostfixForTypeWarning(checker),
                  i
                );
                return emptyFunction.thatReturnsNull;
              }
            }
            function validate(props, propName, componentName, location, propFullName) {
              for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
                var checker2 = arrayOfTypeCheckers[i2];
                if (checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
                  return null;
                }
              }
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`."));
            }
            return createChainableTypeChecker(validate);
          }
          function createNodeChecker() {
            function validate(props, propName, componentName, location, propFullName) {
              if (!isNode(props[propName])) {
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function createShapeTypeChecker(shapeTypes) {
            function validate(props, propName, componentName, location, propFullName) {
              var propValue = props[propName];
              var propType = getPropType(propValue);
              if (propType !== "object") {
                return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
              }
              for (var key in shapeTypes) {
                var checker = shapeTypes[key];
                if (!checker) {
                  continue;
                }
                var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error) {
                  return error;
                }
              }
              return null;
            }
            return createChainableTypeChecker(validate);
          }
          function isNode(propValue) {
            switch (typeof propValue) {
              case "number":
              case "string":
              case "undefined":
                return true;
              case "boolean":
                return !propValue;
              case "object":
                if (Array.isArray(propValue)) {
                  return propValue.every(isNode);
                }
                if (propValue === null || isValidElement(propValue)) {
                  return true;
                }
                var iteratorFn = getIteratorFn(propValue);
                if (iteratorFn) {
                  var iterator = iteratorFn.call(propValue);
                  var step;
                  if (iteratorFn !== propValue.entries) {
                    while (!(step = iterator.next()).done) {
                      if (!isNode(step.value)) {
                        return false;
                      }
                    }
                  } else {
                    while (!(step = iterator.next()).done) {
                      var entry = step.value;
                      if (entry) {
                        if (!isNode(entry[1])) {
                          return false;
                        }
                      }
                    }
                  }
                } else {
                  return false;
                }
                return true;
              default:
                return false;
            }
          }
          function isSymbol(propType, propValue) {
            if (propType === "symbol") {
              return true;
            }
            if (propValue["@@toStringTag"] === "Symbol") {
              return true;
            }
            if (typeof Symbol === "function" && propValue instanceof Symbol) {
              return true;
            }
            return false;
          }
          function getPropType(propValue) {
            var propType = typeof propValue;
            if (Array.isArray(propValue)) {
              return "array";
            }
            if (propValue instanceof RegExp) {
              return "object";
            }
            if (isSymbol(propType, propValue)) {
              return "symbol";
            }
            return propType;
          }
          function getPreciseType(propValue) {
            if (typeof propValue === "undefined" || propValue === null) {
              return "" + propValue;
            }
            var propType = getPropType(propValue);
            if (propType === "object") {
              if (propValue instanceof Date) {
                return "date";
              } else if (propValue instanceof RegExp) {
                return "regexp";
              }
            }
            return propType;
          }
          function getPostfixForTypeWarning(value) {
            var type = getPreciseType(value);
            switch (type) {
              case "array":
              case "object":
                return "an " + type;
              case "boolean":
              case "date":
              case "regexp":
                return "a " + type;
              default:
                return type;
            }
          }
          function getClassName(propValue) {
            if (!propValue.constructor || !propValue.constructor.name) {
              return ANONYMOUS;
            }
            return propValue.constructor.name;
          }
          ReactPropTypes.checkPropTypes = checkPropTypes;
          ReactPropTypes.PropTypes = ReactPropTypes;
          return ReactPropTypes;
        };
      },
      /* 4 */
      /***/
      function(module2, exports2) {
        "use strict";
        function makeEmptyFunction(arg) {
          return function() {
            return arg;
          };
        }
        var emptyFunction = function emptyFunction2() {
        };
        emptyFunction.thatReturns = makeEmptyFunction;
        emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
        emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
        emptyFunction.thatReturnsNull = makeEmptyFunction(null);
        emptyFunction.thatReturnsThis = function() {
          return this;
        };
        emptyFunction.thatReturnsArgument = function(arg) {
          return arg;
        };
        module2.exports = emptyFunction;
      },
      /* 5 */
      /***/
      function(module2, exports2) {
        "use strict";
        var validateFormat = function validateFormat2(format) {
        };
        if (true) {
          validateFormat = function validateFormat2(format) {
            if (format === void 0) {
              throw new Error("invariant requires an error message argument");
            }
          };
        }
        function invariant(condition, format, a, b, c, d, e, f) {
          validateFormat(format);
          if (!condition) {
            var error;
            if (format === void 0) {
              error = new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
            } else {
              var args = [a, b, c, d, e, f];
              var argIndex = 0;
              error = new Error(format.replace(/%s/g, function() {
                return args[argIndex++];
              }));
              error.name = "Invariant Violation";
            }
            error.framesToPop = 1;
            throw error;
          }
        }
        module2.exports = invariant;
      },
      /* 6 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        var emptyFunction = __webpack_require__(4);
        var warning = emptyFunction;
        if (true) {
          (function() {
            var printWarning = function printWarning2(format) {
              for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              var argIndex = 0;
              var message = "Warning: " + format.replace(/%s/g, function() {
                return args[argIndex++];
              });
              if (typeof console !== "undefined") {
                console.error(message);
              }
              try {
                throw new Error(message);
              } catch (x) {
              }
            };
            warning = function warning2(condition, format) {
              if (format === void 0) {
                throw new Error("`warning(condition, format, ...args)` requires a warning message argument");
              }
              if (format.indexOf("Failed Composite propType: ") === 0) {
                return;
              }
              if (!condition) {
                for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
                  args[_key2 - 2] = arguments[_key2];
                }
                printWarning.apply(void 0, [format].concat(args));
              }
            };
          })();
        }
        module2.exports = warning;
      },
      /* 7 */
      /***/
      function(module2, exports2) {
        "use strict";
        var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
        module2.exports = ReactPropTypesSecret;
      },
      /* 8 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        if (true) {
          var invariant = __webpack_require__(5);
          var warning = __webpack_require__(6);
          var ReactPropTypesSecret = __webpack_require__(7);
          var loggedTypeFailures = {};
        }
        function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
          if (true) {
            for (var typeSpecName in typeSpecs) {
              if (typeSpecs.hasOwnProperty(typeSpecName)) {
                var error;
                try {
                  invariant(typeof typeSpecs[typeSpecName] === "function", "%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.", componentName || "React class", location, typeSpecName);
                  error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
                } catch (ex) {
                  error = ex;
                }
                warning(!error || error instanceof Error, "%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error);
                if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                  loggedTypeFailures[error.message] = true;
                  var stack = getStack ? getStack() : "";
                  warning(false, "Failed %s type: %s%s", location, error.message, stack != null ? stack : "");
                }
              }
            }
          }
        }
        module2.exports = checkPropTypes;
      },
      /* 9 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        var emptyFunction = __webpack_require__(4);
        var invariant = __webpack_require__(5);
        var ReactPropTypesSecret = __webpack_require__(7);
        module2.exports = function() {
          function shim(props, propName, componentName, location, propFullName, secret) {
            if (secret === ReactPropTypesSecret) {
              return;
            }
            invariant(
              false,
              "Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types"
            );
          }
          ;
          shim.isRequired = shim;
          function getShim() {
            return shim;
          }
          ;
          var ReactPropTypes = {
            array: shim,
            bool: shim,
            func: shim,
            number: shim,
            object: shim,
            string: shim,
            symbol: shim,
            any: shim,
            arrayOf: getShim,
            element: shim,
            instanceOf: getShim,
            node: shim,
            objectOf: getShim,
            oneOf: getShim,
            oneOfType: getShim,
            shape: getShim
          };
          ReactPropTypes.checkPropTypes = emptyFunction;
          ReactPropTypes.PropTypes = ReactPropTypes;
          return ReactPropTypes;
        };
      },
      /* 10 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _createClass = /* @__PURE__ */ function() {
          function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
              var descriptor = props[i];
              descriptor.enumerable = descriptor.enumerable || false;
              descriptor.configurable = true;
              if ("value" in descriptor)
                descriptor.writable = true;
              Object.defineProperty(target, descriptor.key, descriptor);
            }
          }
          return function(Constructor, protoProps, staticProps) {
            if (protoProps)
              defineProperties(Constructor.prototype, protoProps);
            if (staticProps)
              defineProperties(Constructor, staticProps);
            return Constructor;
          };
        }();
        var _react = __webpack_require__(1);
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = __webpack_require__(2);
        var _propTypes2 = _interopRequireDefault(_propTypes);
        __webpack_require__(11);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
          if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
          }
        }
        function _possibleConstructorReturn(self, call) {
          if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
          }
          return call && (typeof call === "object" || typeof call === "function") ? call : self;
        }
        function _inherits(subClass, superClass) {
          if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
          }
          subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
          if (superClass)
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        var Cursor = function(_Component) {
          _inherits(Cursor2, _Component);
          function Cursor2(props) {
            _classCallCheck(this, Cursor2);
            var _this = _possibleConstructorReturn(this, (Cursor2.__proto__ || Object.getPrototypeOf(Cursor2)).call(this, props));
            _this._isReRenderingCursor = false;
            _this.state = {
              shouldRender: _this.props.show
            };
            return _this;
          }
          _createClass(Cursor2, [{
            key: "componentWillReceiveProps",
            value: function componentWillReceiveProps(nextProps) {
              var _this2 = this;
              var shouldHide = !this.props.isDone && nextProps.isDone && this.props.hideWhenDone;
              if (shouldHide) {
                setTimeout(function() {
                  return _this2.setState({ shouldRender: false });
                }, this.props.hideWhenDoneDelay);
              }
            }
          }, {
            key: "componentDidUpdate",
            value: function componentDidUpdate() {
              var _props = this.props, show = _props.show, isDone = _props.isDone;
              if (!show) {
                return;
              }
              if (isDone) {
                return;
              }
              if (this._isReRenderingCursor) {
                return;
              }
              this._reRenderCursor();
            }
          }, {
            key: "_reRenderCursor",
            value: function _reRenderCursor() {
              var _this3 = this;
              this._isReRenderingCursor = true;
              this.setState({ shouldRender: false }, function() {
                _this3.setState({ shouldRender: true }, function() {
                  _this3._isReRenderingCursor = false;
                });
              });
            }
          }, {
            key: "render",
            value: function render() {
              if (this.state.shouldRender) {
                var className = this.props.blink ? " Cursor--blinking" : "";
                return _react2.default.createElement(
                  "span",
                  { className: "Cursor" + className },
                  this.props.element
                );
              }
              return null;
            }
          }]);
          return Cursor2;
        }(_react.Component);
        Cursor.propTypes = {
          blink: _propTypes2.default.bool,
          show: _propTypes2.default.bool,
          element: _propTypes2.default.node,
          hideWhenDone: _propTypes2.default.bool,
          hideWhenDoneDelay: _propTypes2.default.number,
          isDone: _propTypes2.default.bool
        };
        Cursor.defaultProps = {
          blink: true,
          show: true,
          element: "|",
          hideWhenDone: false,
          hideWhenDoneDelay: 1e3,
          isDone: false
        };
        exports2.default = Cursor;
      },
      /* 11 */
      /***/
      function(module2, exports2) {
      },
      /* 12 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _react = __webpack_require__(1);
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = __webpack_require__(2);
        var _propTypes2 = _interopRequireDefault(_propTypes);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }
        var Backspace = function Backspace2() {
          return _react2.default.createElement("noscript", null);
        };
        Backspace.componentName = "Backspace";
        Backspace.propTypes = {
          count: _propTypes2.default.number,
          delay: _propTypes2.default.number
        };
        Backspace.defaultProps = {
          count: 1,
          delay: 0
        };
        exports2.default = Backspace;
      },
      /* 13 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        var _react = __webpack_require__(1);
        var _react2 = _interopRequireDefault(_react);
        var _propTypes = __webpack_require__(2);
        var _propTypes2 = _interopRequireDefault(_propTypes);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }
        var Delay = function Delay2() {
          return _react2.default.createElement("noscript", null);
        };
        Delay.componentName = "Delay";
        Delay.propTypes = {
          ms: _propTypes2.default.number.isRequired
        };
        exports2.default = Delay;
      },
      /* 14 */
      /***/
      function(module2, exports2, __webpack_require__) {
        "use strict";
        Object.defineProperty(exports2, "__esModule", {
          value: true
        });
        exports2.sleep = void 0;
        var _slicedToArray = /* @__PURE__ */ function() {
          function sliceIterator(arr, i) {
            var _arr = [];
            var _n = true;
            var _d = false;
            var _e = void 0;
            try {
              for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i && _arr.length === i)
                  break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i["return"])
                  _i["return"]();
              } finally {
                if (_d)
                  throw _e;
              }
            }
            return _arr;
          }
          return function(arr, i) {
            if (Array.isArray(arr)) {
              return arr;
            } else if (Symbol.iterator in Object(arr)) {
              return sliceIterator(arr, i);
            } else {
              throw new TypeError("Invalid attempt to destructure non-iterable instance");
            }
          };
        }();
        exports2.gaussianRnd = gaussianRnd;
        exports2.eachPromise = eachPromise;
        exports2.exclude = exclude;
        exports2.isBackspaceElement = isBackspaceElement;
        exports2.isDelayElement = isDelayElement;
        exports2.extractTextFromElement = extractTextFromElement;
        exports2.cloneElement = cloneElement;
        exports2.cloneElementWithSpecifiedText = cloneElementWithSpecifiedText;
        var _react = __webpack_require__(1);
        var _react2 = _interopRequireDefault(_react);
        function _interopRequireDefault(obj) {
          return obj && obj.__esModule ? obj : { default: obj };
        }
        function _toConsumableArray(arr) {
          if (Array.isArray(arr)) {
            for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
              arr2[i] = arr[i];
            }
            return arr2;
          } else {
            return Array.from(arr);
          }
        }
        var sleep = exports2.sleep = function sleep2(val) {
          return new Promise(function(resolve) {
            return val != null ? setTimeout(resolve, val) : resolve();
          });
        };
        function gaussianRnd(mean, std) {
          var times = 12;
          var sum = 0;
          for (var idx = 0; idx < times; idx++) {
            sum += Math.random();
          }
          sum -= times / 2;
          return Math.round(sum * std) + mean;
        }
        function eachPromise(arr, iterator) {
          for (var _len = arguments.length, extraArgs = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
            extraArgs[_key - 2] = arguments[_key];
          }
          var promiseReducer = function promiseReducer2(prev, current, idx) {
            return prev.then(function() {
              return iterator.apply(void 0, [current, idx].concat(extraArgs));
            });
          };
          return Array.from(arr).reduce(promiseReducer, Promise.resolve());
        }
        function exclude(obj, keys) {
          var res = {};
          for (var key in obj) {
            if (keys.indexOf(key) === -1) {
              res[key] = obj[key];
            }
          }
          return res;
        }
        function isBackspaceElement(element) {
          return element && element.type && element.type.componentName === "Backspace";
        }
        function isDelayElement(element) {
          return element && element.type && element.type.componentName === "Delay";
        }
        function extractTextFromElement(element) {
          var stack = element ? [element] : [];
          var lines = [];
          while (stack.length > 0) {
            var current = stack.pop();
            if (_react2.default.isValidElement(current)) {
              if (isBackspaceElement(current) || isDelayElement(current)) {
                lines.unshift(current);
              } else {
                _react2.default.Children.forEach(current.props.children, function(child) {
                  stack.push(child);
                });
              }
            } else if (Array.isArray(current)) {
              var _iteratorNormalCompletion = true;
              var _didIteratorError = false;
              var _iteratorError = void 0;
              try {
                for (var _iterator = current[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                  var el = _step.value;
                  stack.push(el);
                }
              } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
              } finally {
                try {
                  if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                  }
                } finally {
                  if (_didIteratorError) {
                    throw _iteratorError;
                  }
                }
              }
            } else {
              lines.unshift(current);
            }
          }
          return lines;
        }
        function cloneElement(element, children) {
          var tag = element.type;
          var props = exclude(element.props, ["children"]);
          var getMilliseconds = (/* @__PURE__ */ new Date()).getUTCMilliseconds();
          var randomStamp = getMilliseconds + Math.random() + Math.random();
          props.key = "Typist-element-" + tag + "-" + randomStamp;
          return _react2.default.createElement.apply(_react2.default, [tag, props].concat(_toConsumableArray(children)));
        }
        function cloneElementWithSpecifiedTextAtIndex(element, textLines, textIdx) {
          if (textIdx >= textLines.length) {
            return [null, textIdx];
          }
          var idx = textIdx;
          var recurse = function recurse2(el) {
            var _cloneElementWithSpec = cloneElementWithSpecifiedTextAtIndex(el, textLines, idx), _cloneElementWithSpec2 = _slicedToArray(_cloneElementWithSpec, 2), child = _cloneElementWithSpec2[0], advIdx = _cloneElementWithSpec2[1];
            idx = advIdx;
            return child;
          };
          var isNonTypistElement = _react2.default.isValidElement(element) && !(isBackspaceElement(element) || isDelayElement(element));
          if (isNonTypistElement) {
            var clonedChildren = _react2.default.Children.map(element.props.children, recurse) || [];
            return [cloneElement(element, clonedChildren), idx];
          }
          if (Array.isArray(element)) {
            var children = element.map(recurse);
            return [children, idx];
          }
          return [textLines[idx], idx + 1];
        }
        function cloneElementWithSpecifiedText(_ref) {
          var element = _ref.element, textLines = _ref.textLines;
          if (!element) {
            return void 0;
          }
          return cloneElementWithSpecifiedTextAtIndex(element, textLines, 0)[0];
        }
      }
      /******/
    ]);
  }
});
export default require_Typist();
//# sourceMappingURL=react-typist.js.map
